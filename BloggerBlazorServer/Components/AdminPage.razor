@page "/admin"
@using BloggerBlazorServer.Data
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.QuickGrid
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Admin Page</PageTitle>

<h3>Admin Page</h3>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

<div class="page-size-chooser">
    Items per page:
    <select @bind="@pagination.ItemsPerPage">
        <option>5</option>
        <option>10</option>
        <option>20</option>
        <option>50</option>
    </select>
</div>

<div class="grid">
    <QuickGrid Items="@FilteredUsers" Pagination="@pagination">
        <PropertyColumn Property="@(c => c.Email)" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="emailFilter" @bind:event="oninput" placeholder="Email" />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(c => c.FirstName)" Sortable="true" />
        <PropertyColumn Property="@(c => c.LastName)" Sortable="true" />
        <PropertyColumn Property="@(c => c.Role)" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="roleFilter" @bind:event="oninput" placeholder="Role" />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <TemplateColumn>
            <div class="button-group">
                <button @onclick="@(() => ChangeRole(context.Id))" class="btn btn-primary">Change Role</button>
                @if (!context.IsAuth)
                {
                    <button @onclick="@(() => AuthorizeUser(context.Id))" class="btn btn-success">Authorize</button>
                }
                else
                {
                    <button @onclick="@(() => DeauthorizeUser(context.Id))" class="btn btn-danger">Deauthorize</button>
                }
            </div>
        </TemplateColumn>
    </QuickGrid>
</div>

<Paginator State="@pagination" />

@code {
    private PaginationState pagination = new() { ItemsPerPage = 10 };
    private IQueryable<ApplicationUser>? itemsQueryable;
    private List<ApplicationUser>? users;
    private string? errorMessage;

    string emailFilter = string.Empty;
    string roleFilter = string.Empty;

    IQueryable<ApplicationUser> FilteredUsers
    {
        get
        {
            if (itemsQueryable == null)
            {
                return Enumerable.Empty<ApplicationUser>().AsQueryable();
            }

            var result = itemsQueryable;
            if (!string.IsNullOrEmpty(emailFilter) && !string.IsNullOrEmpty(roleFilter))
            {
                result = result.Where(c => c.Email != null && c.Email.Contains(emailFilter, StringComparison.CurrentCultureIgnoreCase) && c.Role.Contains(roleFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            else if (!string.IsNullOrEmpty(emailFilter))
            {
                result = result.Where(c => c.Email != null && c.Email.Contains(emailFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            else if (!string.IsNullOrEmpty(roleFilter))
            {
                result = result.Where(c => c.Role.Contains(roleFilter, StringComparison.CurrentCultureIgnoreCase));
            }

            return result;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            users = await Http.GetFromJsonAsync<List<ApplicationUser>>($"{Navigation.BaseUri}api/User");
            itemsQueryable = users?.AsQueryable();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task ChangeRole(string userId)
    {
        try
        {
            var response = await Http.PostAsync($"{Navigation.BaseUri}api/User/ChangeRole/{userId}", null);
            if (response.IsSuccessStatusCode)
            {
                await LoadUsers();
            }
            else
            {
                errorMessage = "Failed to change role.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task AuthorizeUser(string userId)
    {
        try
        {
            var response = await Http.PostAsync($"{Navigation.BaseUri}api/User/Authorize/{userId}", null);
            if (response.IsSuccessStatusCode)
            {
                await LoadUsers();
            }
            else
            {
                errorMessage = "Failed to authorize user.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task DeauthorizeUser(string userId)
    {
        try
        {
            var response = await Http.PostAsync($"{Navigation.BaseUri}api/User/Deauthorize/{userId}", null);
            if (response.IsSuccessStatusCode)
            {
                await LoadUsers();
            }
            else
            {
                errorMessage = "Failed to deauthorize user.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}