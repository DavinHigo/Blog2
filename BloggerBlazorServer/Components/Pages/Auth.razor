@page "/auth"

@using Microsoft.AspNetCore.Authorization
@using BloggerLibrary
@using BloggerBlazorServer.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@rendermode InteractiveServer

@attribute [Authorize]

<PageTitle>Auth</PageTitle>

@inject ArticleService ArticleService
@inject UserService UserService
@inject NavigationManager Navigation

@code {
    [CascadingParameter] private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private IEnumerable<Article>? articles;
    private string? userName;
    private PaginationState pagination = new() { ItemsPerPage = 10 };
    private IQueryable<Article>? itemsQueryable;
    private string? titleFilter;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask == null)
        {
            throw new InvalidOperationException("AuthenticationStateTask is null.");
        }
        var authState = await authenticationStateTask;
        var user = authState.User;

        // Get the current user's email
        var currentUser = await UserService.GetCurrentUserAsync();
        if (currentUser?.Email != null)
        {
            // Use the GetFullNameByEmailAsync method to get the full name
            userName = await UserService.GetFullNameByEmailAsync(currentUser.Email);

            // Fetch articles by the current user's username
            if (userName != null)
            {
                articles = await ArticleService.GetArticlesByContributorAsync(userName);
                itemsQueryable = articles?.AsQueryable();
            }
        }
    }

    private async Task DeleteArticle(int articleId)
    {
        await ArticleService.DeleteArticleAsync(articleId);
        if (userName != null)
        {
            articles = await ArticleService.GetArticlesByContributorAsync(userName);
            itemsQueryable = articles?.AsQueryable();
        }
    }

    IQueryable<Article> FilteredArticles
    {
        get
        {
            if (itemsQueryable == null)
            {
                return Enumerable.Empty<Article>().AsQueryable();
            }

            var result = itemsQueryable;
            if (!string.IsNullOrEmpty(titleFilter))
            {
                result = result.Where(a => a.Title.Contains(titleFilter, StringComparison.CurrentCultureIgnoreCase));
            }

            return result;
        }
    }
}

<h1>You are authenticated</h1>

<AuthorizeView>
    <Authorized Context="authContext">
        Hello @userName!

        <h2>Articles</h2>

<a href="/create-article" class="btn btn-primary create-article-btn">Create New Article</a>


        @if (itemsQueryable == null || !itemsQueryable.Any())
        {
            <p>No articles are currently available.</p>
        }
        else
        {
            <div class="page-size-chooser mb-3">
                Items per page:
                <select @bind="@pagination.ItemsPerPage">
                    <option>5</option>
                    <option>10</option>
                    <option>20</option>
                    <option>50</option>
                </select>
            </div>

            <QuickGrid Items="@FilteredArticles" Pagination="@pagination" class="table">
                <PropertyColumn Property="@(a => a.Title)" Sortable="true">
                    <ColumnOptions>
                        <div class="search-box">
                            <input type="search" @bind="titleFilter" @bind:event="oninput" placeholder="Search titles..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Property="@(a => a.CreateDate)" Format="yyyy-MM-dd" Sortable="true" />
                <PropertyColumn Property="@(a => a.ContributorUsername)" Sortable="true" />
                <TemplateColumn>
                    <div class="btn-group">
                        <a href="edit-article/@context.ArticleId" class="btn btn-sm btn-warning">Edit</a>
                        <button @onclick="@(() => DeleteArticle(context.ArticleId))" class="btn btn-sm btn-danger">Delete</button>
                    </div>
                </TemplateColumn>
            </QuickGrid>

            <Paginator State="@pagination" />
        }
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to view this content.</p>
    </NotAuthorized>
</AuthorizeView>