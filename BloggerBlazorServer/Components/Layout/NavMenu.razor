@implements IDisposable

@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="top-row sticky-top shadow-sm">
    <div class="container-fluid d-flex justify-content-between align-items-center flex-nowrap px-3">
        <a class="navbar-brand" href="">BloggerBlazorServer</a>
        <div class="nav-button-group d-flex align-items-center">
            <NavLink href="/" class="my-btn my-btn-primary">Home</NavLink>
            <NavLink href="/auth" class="my-btn my-btn-secondary">Articles</NavLink>

            <AuthorizeView Roles="Admin">
                <NavLink href="/admin" class="my-btn my-btn-warning">Admin Panel</NavLink>
            </AuthorizeView>

            <AuthorizeView>
                <Authorized>
                    <NavLink class="btn btn-outline-info me-2" href="Account/Manage">@userName</NavLink>
                    <form action="Account/Logout" method="post" class="d-inline">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="my-btn my-btn-danger">Logout</button>
                    </form>

                </Authorized>
                <NotAuthorized>
                    <NavLink href="/Account/Register" class="my-btn my-btn-success">Register</NavLink>
                    <NavLink href="/Account/Login" class="my-btn my-btn-primary">Login</NavLink>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</div>

@code {
    private string? currentUrl;
    private string? userName;

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userName = user.Identity?.Name;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
